package ruleFile;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * Date 24/11/2017 12:44:51 AM
 * 
 * @author Rubaiyat Jahan Mumu
 * 
 **/
public class SourceSink {

	public static void main(String[] args) {
		insertPrintStatement("D:\\SPL3\\Test Files\\Grammarly\\src\\js\\bundle.js");

	}

	public static void insertPrintStatement(String directoryName) {
		File file = new File(directoryName);
		String dest = file.getParent() + "\\tempFile.js";
		List<String> functions = new ArrayList<>();
		List<String> sources = new ArrayList<>();
		List<String> sinks = new ArrayList<>();
		Pattern func = Pattern.compile("(.*?)(function)(.*?)");
		Pattern sourceSt = Pattern.compile("(((document.)((getElementById\\()|(querySelector\\())(\"|')(\\w*)(\"\\)|'\\)))|((\\w*.open\\(\"GET\",\"\\w*\")(\\)|,))|(\\$.get\\()|(localStorage)((.getItem\\(\"\\w*\"\\)|\\[\"\\w*\"\\]|\\.\\w*[^(setItem)][^(removeItem)][^(clear)]))|(type(\\s:|:)(\\s'GET'|'GET')))");
		//Pattern sourceSt = Pattern.compile("((location\\s*[\\[.])|([.\\[]\\s*[\"']?\\s*(arguments|dialogArguments|innerHTML|write(ln)?|open(Dialog)?|showModalDialog|cookie|URL|documentURI|baseURI|referrer|name|opener|parent|top|content|self|frames)\\W)|(localStorage|sessionStorage|Database))");
		Pattern sinkSt = Pattern.compile(
				"(((src|href|data|location|code|value|action)\\s*[\"'\\]]*\\s*\\+?\\s*=)|((replace|assign|navigate|getResponseHeader|open(Dialog)?|showModalDialog|eval|evaluate|execCommand|execScript|setTimeout|setInterval)\\s*[\"'\\]]*\\s*\\())");
		Pattern sinkSt2 = Pattern.compile("(after\\(|\\.append\\(|\\.before\\(|\\.html\\(|\\.prepend\\(|\\.replaceWith\\(|\\.wrap\\(|\\.wrapAll\\(|\\$\\(|\\.globalEval\\(|\\.add\\(|jQUery\\(|\\$\\(|\\.parseHTML\\(/)");
		Scanner scanner;
		FileWriter fw = null;
		BufferedWriter bw = null;
		try {
			scanner = new Scanner(file);
			try {
				fw = new FileWriter(dest, true); // Do keep previous content
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			bw = new BufferedWriter(fw);

			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();

				Matcher fu = func.matcher(line);
				Matcher so = sourceSt.matcher(line);
				Matcher si = sinkSt.matcher(line);
				Matcher si2 = sinkSt2.matcher(line);

				if (fu.find()) {

					functions.add(line);
				}

				if (so.find()) {
					sources.add(line);
				}
				
				if(si.find())
				{
					sinks.add(line);
				}
				
				if(si2.find())
				{
					//sinks.add(line);
				}

			}
			System.out.println("Function Statements: ");
			printList(functions);
			System.out.println("\n\nSource Statements: ");
			printList(sources);
			System.out.println("\n\nSink Statements: ");
			printList(sinks);
			
			scanner.close();
		} catch (FileNotFoundException e1) {

			e1.printStackTrace();
		} finally {
			try {
				bw.close();
				fw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}


	}
	
	public static void printList(List<String> list)
	{
		for(int i=0;i<list.size();i++)
			System.out.println(i+1 + " " + list.get(i));
	}

}
