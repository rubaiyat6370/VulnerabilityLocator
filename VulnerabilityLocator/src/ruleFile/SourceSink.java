package ruleFile;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import wala.SourceSinkTrack;

/**
 *
 * Date 24/11/2017 12:44:51 AM
 * 
 * @author Rubaiyat Jahan Mumu
 * 
 **/
public class SourceSink {

	static List<SourceSinkTrack> sourceSinkTracks = new ArrayList<>();
	public static void main(String[] args) {
		
		SourceSink ss = new SourceSink();
		ss.listFilesAndFilesSubDirectories("D:\\SPL3\\VulnerabilityLocator\\VulnerabilityLocator\\test");
		ss.printList(sourceSinkTracks);

	}
	
	public List<SourceSinkTrack> getSrcSnkList(String dir) {
		
		SourceSink ss = new SourceSink();
		ss.listFilesAndFilesSubDirectories(dir);
		//ss.printList(sourceSinkTracks);
		return sourceSinkTracks;
		
	}
	
	private void listFilesAndFilesSubDirectories(String directoryName) {
		File directory = new File(directoryName);

		File[] fList = directory.listFiles();
		for (File file : fList) {

			if (file.isDirectory()) {
				listFilesAndFilesSubDirectories(file.getAbsolutePath());
			}

			else if (file.isFile()) {
				String filename = file.getName();
				String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());

				String ex = "js";
				if (extension.equals(ex)) {
					System.out.println(filename);
					findSourceSink(file.getAbsolutePath());
				}
			}
		}

	}

	private void findSourceSink(String directoryName) {
		File file = new File(directoryName);
		String dest = file.getParent() + "\\tempFile.js";
		List<String> functions = new ArrayList<>();
		
		List<Integer> linesour = new ArrayList<>();
		List<Integer> linesink = new ArrayList<>();
		List<String> sources = new ArrayList<>();
		List<String> sinks = new ArrayList<>();
		Pattern func = Pattern.compile("(.*?)(function)(.*?)");
		Pattern sourceSt = Pattern.compile("(((document.)((getElementById\\s*\\()|(querySelector\\s*\\())(\\s*\\\"|\\s*')(\\w*)(\\s*\\\"\\)|\\s*'\\)))|((\\w*.open\\s*\\(\\s*\\\"\\s*GET\\s*\\\"\\,))|(\\$.get\\s*\\()|((local|session)(Storage))((\\.getItem\\s*\\(|\\s*\\[\\s*\\\"\\s*\\w*\\s*\\\"\\s*\\]|(\\s*\\.\\s*\\w*[^(setItem)][^(removeItem)][^(clear)](\\s*\\w))))|(type(\\s*:)(\\s*\\'\\s*GET\\s*\\')))");
		//Pattern sourceSt = Pattern.compile("((location\\s*[\\[.])|([.\\[]\\s*[\"']?\\s*(arguments|dialogArguments|innerHTML|write(ln)?|open(Dialog)?|showModalDialog|cookie|URL|documentURI|baseURI|referrer|name|opener|parent|top|content|self|frames)\\W)|(localStorage|sessionStorage|Database))");
		
		Pattern sinkSt = Pattern.compile("(((\\w*\\.open\\s*\\(\\s*\\\"\\s*POST\\s*\\\"\\s*\\,))|(\\$\\.post\\s*\\()|((local|session)(Storage))((\\.setItem\\s*\\())|(type(\\s*:)(\\s*\\'\\s*POST\\s*\\'))|((W|w)(indow\\s*\\.)(postMessage))|((\\s*\\.write)(ln|)\\s*\\())");
		//Pattern sinkSt = Pattern.compile("(((src|href|data|location|code|value|action)\\s*[\"'\\]]*\\s*\\+?\\s*=)|((replace|assign|navigate|getResponseHeader|open(Dialog)?|showModalDialog|eval|evaluate|execCommand|execScript|setTimeout|setInterval)\\s*[\"'\\]]*\\s*\\())");
		//Pattern sinkSt2 = Pattern.compile("(after\\(|\\.append\\(|\\.before\\(|\\.html\\(|\\.prepend\\(|\\.replaceWith\\(|\\.wrap\\(|\\.wrapAll\\(|\\$\\(|\\.globalEval\\(|\\.add\\(|jQUery\\(|\\$\\(|\\.parseHTML\\(/)");
		Scanner scanner;
		FileWriter fw = null;
		BufferedWriter bw = null;
		System.out.println("Start File reading");
		try {
			scanner = new Scanner(file);
			try {
				fw = new FileWriter(dest, true); // Do keep previous content
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			bw = new BufferedWriter(fw);
			int lineno = 0;
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				lineno++;
				//Matcher fu = func.matcher(line);
				Matcher so = sourceSt.matcher(line);
				Matcher si = sinkSt.matcher(line);
				//Matcher si2 = sinkSt2.matcher(line);

				/*if (fu.find()) {

					//functions.add(line);
				}*/

				if (so.find()) {
					//sources.add(line);
					//linesour.add(lineno);
					sourceSinkTracks.add(new SourceSinkTrack(file.getName(),line ,"src", Integer.toString(lineno)));
					
				}
				
				if(si.find())
				{
					//sinks.add(line);
					//linesink.add(lineno);
					sourceSinkTracks.add(new SourceSinkTrack(file.getName(),line,"snk", Integer.toString(lineno)));
				}
				
				

			}
			
			
			scanner.close();
		} catch (FileNotFoundException e1) {

			e1.printStackTrace();
		} finally {
			try {
				bw.close();
				fw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}


	}
	
	public void printList(List<SourceSinkTrack> list)
	{
		for(int i=0;i<list.size();i++)
		{
			System.out.println(list.get(i).filename + "\t"+ list.get(i).lineNumber + "\t"+ list.get(i).type + "\t" + list.get(i).statement);
		}
	}
	
	public static void printList(List<String> list, List<Integer> line)
	{
		for(int i=0;i<list.size();i++)
			System.out.println(line.get(i) + " " + list.get(i));
	}

}
