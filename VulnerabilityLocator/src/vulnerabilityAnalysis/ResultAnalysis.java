package vulnerabilityAnalysis;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import wala.EncryptionDecryptionLocator;

/**
 *
 * Date 20/12/2017 6:45:43 PM
 * Rubaiyat Jahan Mumu
 * 
 **/
public class ResultAnalysis {
	
	private List<List<String>> GetFilteredPathsWithSourceAndSinkOnly(List<List<String>> paths,
			List<String> sourceVariables, List<String> sinkVariables, List<String> encVars, List<String> decVars) {
		List<List<String>> filteredPaths = new ArrayList<>();
		boolean flag = false;
		for (List<String> path : paths) {
			boolean sourceContains = !Collections.disjoint(sourceVariables, path);
			boolean sinkContains = !Collections.disjoint(sinkVariables, path);
			if (sourceContains && sinkContains) {
				filteredPaths.add(path);
				if (!flag) {
					int size = 0;
					if (encVars.size() > decVars.size()) {
						size = encVars.size();
					} else {
						size = decVars.size();
					}
					for (int i = 0; i < size; i++) {
						if (i<encVars.size()) {
							path.add(encVars.get(i));
						}
						if (i< decVars.size()) {
							path.add(decVars.get(i));
						}

					}
					flag = true;
				}

			}
		}

		return filteredPaths;
	}
	
	private List<List<EncryptionDecryptionLocator>> getEncryptionDecryptionLocations(List<List<String>> paths,
			List<String> encryptedVars, List<String> decryptedVars) {
		List<List<EncryptionDecryptionLocator>> encryptionDecryptionListOfList = new ArrayList<>();
		for (List<String> path : paths) {
			List<EncryptionDecryptionLocator> encryptionDecryptionList = new ArrayList<>();
			int index = -1;
			for (String variable : path) {
				index++;
				
				if (encryptedVars.contains(variable)) {
					encryptionDecryptionList.add(new EncryptionDecryptionLocator("Encryption", variable, index));
				}

				if (decryptedVars.contains(variable)) {
					encryptionDecryptionList.add(new EncryptionDecryptionLocator("Decryption", variable, index));
				}

			}

			encryptionDecryptionList.sort((o1, o2) -> o1.position - o2.position);
			encryptionDecryptionListOfList.add(encryptionDecryptionList);
		}
		return encryptionDecryptionListOfList;
	}
}
