
package vulnerabilityAnalysis;

/**
 *
 * Created on 11/11/2017 12:20:16 AM
 * All rights reserved by Rubaiyat Jahan Mumu
 *
 **/

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;

import com.ibm.wala.util.CancelException;
import com.ibm.wala.util.WalaException;

import Instrumentation.ReadJsFile;
import wala.CallGraphGenerator;

class RunApplication {
	private JFrame j;
	private JMenu jmenu;
	private JMenuBar jbar;
	private JMenuItem jmi, jexit;
	private JPanel jpanel;
	JLabel image;
	ImageIcon ic;
	Image img;

	RunApplication() {
	
		j = new JFrame("Directory Chooser");
		j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// j.setExtendedState(Frame.MAXIMIZED_BOTH);
		// j.setLocationRelativeTo(null);
		j.setLocationByPlatform(true);
		j.setLayout(new GridBagLayout());

		GridBagConstraints c = new GridBagConstraints();
		jpanel = new JPanel();
		jpanel.setLayout(new BorderLayout());
		jpanel.setPreferredSize(new Dimension(800, 450));
		//image = new JLabel(" ");
		//jpanel.add(image, BorderLayout.CENTER);

		c.anchor = GridBagConstraints.CENTER;
		// c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = c.gridy = 0;
		c.gridwidth = 100;
		c.weightx = 0.1;
		c.weighty = .8;
		c.ipady = 1;
		// c.insets = new Insets(5, 5, 10, 5);
		jpanel.setBackground(Color.BLACK);
		j.add(jpanel, c);

		// Creating Menu
		jbar = new JMenuBar();
		jmenu = new JMenu("Start");
		jmi = new JMenuItem("Start Instrumentation");
		 // Creation of a label to contain all the JButtons.
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(null);
        buttonPanel.setLocation(10, 10);
        buttonPanel.setSize(130, 50);
        jpanel.add(buttonPanel);
        
        //Text field
        JTextField t1,t2;  
        t1=new JTextField("Welcome to Javatpoint.");  
        t1.setBounds(10, 70, 300, 300);; 
        t1.setText("");
      
        
        jpanel.add(t1);

        // We create a button and manipulate it using the syntax we have
        // used before.

        JButton button1 = new JButton("Static Analysis");
        button1.setLocation(10, 10);
        button1.setSize(120, 25);
        buttonPanel.add(button1);
        
        button1.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser fc = new JFileChooser();
				int result = fc.showOpenDialog(null);
				if (result == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					System.out.println(file.getParent());
					CallGraphGenerator cgg = new CallGraphGenerator();
					try {
						cgg.variableUseAnalysis(file.getParent(), file.getName());
					} catch (IllegalArgumentException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (CancelException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (WalaException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					

				}
				
			}
		});

		jmi.addActionListener(new ActionListener() {
			private BufferedImage bufferedImage;

			public void actionPerformed(ActionEvent ae) {
				JFileChooser fc = new JFileChooser();
				int result = fc.showOpenDialog(null);
				if (result == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					System.out.println(file.getParent());
					ReadJsFile instrument = new ReadJsFile();
					if(instrument.startInstrumentation(file.getParent())){
						successMsg("Instrumentation Complete!!");;
					}
					

				}
			}
		});

		jexit = new JMenuItem("Exit");
		jexit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				System.exit(0);
			}
		});
		jmenu.add(jmi);
		jmenu.add(jexit);
		jbar.add(jmenu);
		j.setJMenuBar(jbar);

		// j.setSize(800, 600);
		j.pack();
		j.setResizable(true);
		j.setVisible(true);
	}

	public void setWarningMsg(String text) {
		Toolkit.getDefaultToolkit().beep();
		JOptionPane optionPane = new JOptionPane(text, JOptionPane.WARNING_MESSAGE);
		JDialog dialog = optionPane.createDialog("Warning!");
		dialog.setAlwaysOnTop(true);
		dialog.setVisible(true);
	}

	public void successMsg(String text) {
		// Toolkit.getDefaultToolkit().beep();
		JOptionPane optionPane = new JOptionPane(text, JOptionPane.DEFAULT_OPTION);
		JDialog dialog = optionPane.createDialog("Success!!");
		dialog.setAlwaysOnTop(true);
		dialog.setVisible(true);
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new RunApplication();
			}
		});
	}
}
