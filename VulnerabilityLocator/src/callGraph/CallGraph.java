package callGraph;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/**
 *
 * Date 12/09/2017 8:02:31 PM @author mumu
 * 
 **/

public class CallGraph {

	public static void main(String[] args) {

		CallGraph cg = new CallGraph();
		String directory = "D:\\SPL3\\VulnerabilityLocator\\VulnerabilityLocator\\src\\Trace.log";
		cg.generateCallGraph(directory);
	}


	public void generateCallGraph(String directory) {
		File file = new File(directory);
		
		List<List<String>> graph = new ArrayList<List<String>>();
		List<String> node = new ArrayList<>();

		Scanner scanner = null;
		try {
			scanner = new Scanner(file);
			String caller = "";
			int i = 0;
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				String[] words = line.split(" ");
				List<String> list = Arrays.asList(words);

				String indexOne = list.get(1);

				if (list.size() == 3 && (indexOne.equals("callee") || indexOne.equals("caller"))) {
					String s = list.get(2);
					List<String> l = new ArrayList<String>();

					if (node.contains(s)) {
						// do nothing
					} else {
						node.add(s);
						l.add("callee of " + s);
						graph.add(l);
					}

					if (indexOne.equals("caller")) {
						caller = s;
						i = node.indexOf(caller);
					}

					if (indexOne.equals("callee")) {
						/*
						 * System.out.println(i); System.out.println("caller "+ caller);
						 * System.out.println("callee "+ s);
						 */

						l = graph.get(i);
						String temp = l.get(l.size()-1);
						if(temp.equals(s))
						{ 
							// do nothing
						}
						else l.add(s);
						graph.set(i, l);
					}

				}
			}

			for (int j = 0; j < graph.size(); j++)
				System.out.println(graph.get(j));
			
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		}

	}

}
