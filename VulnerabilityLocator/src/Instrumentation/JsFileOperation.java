package Instrumentation;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Scanner;
import java.util.regex.Pattern;

/**
 *
 * Date 12/09/2017 8:15:13 PM 
 * @author Rubaiyat Jahan Mumu
 * 
 **/
public class JsFileOperation {
	
	public  void deleteAndReplace(String directoryName) {
		File directory = new File(directoryName);
		File[] fList = directory.listFiles();
		for (File file : fList) {

			if (file.isDirectory()) {
				// System.out.println("directory");
				deleteAndReplace(file.getAbsolutePath());
			}
			/**Need to handle filename with no extension**/
			else if (file.isFile()) {
				String filename = file.getName();
				String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
				String start = filename.substring(0, 4);
				String end = filename.substring(5, filename.length());
				System.out.println(start + " " + end);
				String ex = "js";
				if (extension.equals(ex) && start.equals("ilvd")) {

					String src = file.getParent() + "\\" + filename;
					String dest = file.getParent() + "\\" + end;
					try {
						Files.copy(Paths.get(src), Paths.get(dest), StandardCopyOption.REPLACE_EXISTING);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					File f = new File(src);

					if (f.delete()) {
						System.out.println("File deleted successfully");
					} else {
						System.out.println("Failed to delete the file");
					}

				}
			}
		}
	}

	public void listFilesAndFilesSubDirectories(String directoryName) {
		File directory = new File(directoryName);

		File[] fList = directory.listFiles();
		for (File file : fList) {

			if (file.isDirectory()) {
				listFilesAndFilesSubDirectories(file.getAbsolutePath());
			}

			else if (file.isFile()) {
				String filename = file.getName();
				String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());

				String ex = "js";
				if (extension.equals(ex)) {
					System.out.println(filename);
					insertPrintStatement(file.getAbsolutePath());
				}
			}
		}

	}


	public void insertPrintStatement(String directoryName) {
		File file = new File(directoryName);
		String dest = file.getParent() + "\\temp"+file.getName()+".js";
		
		Scanner scanner;
		FileWriter fw = null;
		BufferedWriter bw = null;
		try {
			scanner = new Scanner(file);
			try {
				fw = new FileWriter(dest, true); // Do keep previous content
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} 
			bw = new BufferedWriter(fw);

			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();

				int funcIndexValid1 = line.indexOf(" function ");
				int funcIndexValid2 = line.indexOf("!function");
				int funcIndexValid3 = line.indexOf("function(");
				int funcIndexValid4 = line.indexOf("function ");
			
				
				try {
					
					bw.write(line);
					bw.newLine();
					bw.flush();

					if (funcIndexValid1 != -1 || funcIndexValid2 != -1 || funcIndexValid3 != -1 || funcIndexValid4 !=-1) {
						int index = line.indexOf("(", line.indexOf("function"));
						int firstBrace = line.indexOf('{');
						int secondBrace = line.lastIndexOf("}");
						boolean bool = false;
						
						if(secondBrace>firstBrace)
							bool = true;

						// need to handle "{" if found in next line
						if (index != -1 && firstBrace != -1 && bool==false) {

							bw.write(" if(arguments.callee.caller && arguments.callee.caller.name){"
									+ "console.debug(\"caller\",arguments.callee.caller.name);" + "}");
							bw.newLine();
							bw.flush();
							
							bw.write(" if(!arguments.callee.caller || !arguments.callee.caller.name){"
									+ "console.debug(\"caller\",\"window\");" + "}");
							bw.newLine();
							bw.flush();
							
							// bw.write("console.log(" +"callee : "+ funcName + ");");
							bw.write(" if(arguments.callee && arguments.callee.name ) {"
									+ "console.debug(\"callee\",arguments.callee.name);" + "}");

							bw.newLine();
							bw.flush();

						}

					}

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			scanner.close();
		} catch (FileNotFoundException e1) {

			e1.printStackTrace();
		} finally {
			
			try {
				bw.close();
				fw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch lock
				e.printStackTrace();
			}
		}

		try {
			Files.copy(Paths.get(dest), Paths.get(directoryName), StandardCopyOption.REPLACE_EXISTING);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		File f = new File(dest);
		f.setWritable(true);
		if (f.delete()) {
			System.out.println("File deleted successfully");
		} else {
			System.out.println("Failed to delete the file");
		}
	}
	
	
	public void splitFile(String directoryName) {
		File file = new File(directoryName);
		Scanner scanner;
		int count = 0;
		try {
			scanner = new Scanner(file);

			while (scanner.hasNextLine()) {
				String path = scanner.nextLine();
				String separator = "\\\\";
				path = path.replace("\\", "\\\\");
				String[] split = path.split(Pattern.quote(separator));
				String[] split2 = path.split(Pattern.quote("*"));

				FileWriter fw;
				BufferedWriter bw = null;
				try {

					if (split[0].equals("ILVD")) {
						path = split2[1];
						// System.out.println(path);
						fw = new FileWriter(path); // Do not keep previous content
						bw = new BufferedWriter(fw);
						int lineNo = Integer.parseInt(split[1]);
						for (int i = 0; i <= lineNo; i++) {
							String newLine = scanner.nextLine();
							System.out.println(newLine);
							bw.write(newLine);
							// bw.newLine();
							bw.flush();
						}
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e1) {

			e1.printStackTrace();
		}
	}

	// To append files before rename functions and methods
	public void appendFiles(String directoryName) {
		File directory = new File(directoryName);
		File[] fList = directory.listFiles();
		for (File file : fList) {

			if (file.isDirectory()) {
				// System.out.println("directory");
				appendFiles(file.getAbsolutePath());
			}

			else if (file.isFile()) {
				String filename = file.getName();
				String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
				String ex = "js";
				if (extension.equals(ex)) {
					String src = file.getParent() + "\\" + filename;
					// String src = "D:\\SPL3\\Grammarly\\test1.js";
					String dest = "D:\\SPL3\\Test\\test.js";
					File f = new File(src);
					Scanner scanner;
					int count = 0;
					try {
						scanner = new Scanner(f);

						while (scanner.hasNextLine()) {
							scanner.nextLine();
							count++;
						}
						System.out.println("Lines in the file: " + count);
					} catch (FileNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					try (FileReader fr = new FileReader(src);
							FileWriter fw = new FileWriter(dest, true); // keep previous content
							BufferedWriter bw = new BufferedWriter(fw);
							BufferedReader br = new BufferedReader(fr);) {

						bw.newLine();
						bw.newLine();
						bw.write("ILVD\\" + count + "\\*" + src);
						bw.newLine();
						bw.newLine();
						bw.flush();
						int c = fr.read();
						while (c != -1) {
							// System.out.println(c);
							fw.write(c);
							c = fr.read();
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}

	}

}
