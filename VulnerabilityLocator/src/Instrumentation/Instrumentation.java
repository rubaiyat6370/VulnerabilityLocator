package Instrumentation;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

/**
 *
 * Date 12/09/2017 8:09:19 PM 
 * @author Rubaiyat Jahan Mumu
 * 
 **/
public class Instrumentation {
	
	public void minify(String directoryName) {
		File directory = new File(directoryName);
		
		// get all the files from a directory
		File[] fList = directory.listFiles();
		for (File file : fList) {

			if (file.isDirectory()) {
				minify(file.getAbsolutePath());
			}

			else if (file.isFile()) {
				String filename = file.getName();
				String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
				String cmd = "java -jar \"D:/SPL3/VulnerabilityLocator/VulnerabilityLocator/src/Compiler/closure-compiler-v20170626.jar\" --js \""
						+ file.getAbsolutePath() + "\" --js_output_file \"" + file.getParent() + "\\ilvd_" + filename
						+ "\"";
				String ex = "js";
				if (extension.equals(ex)) {
					ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", cmd);
					System.out.println(cmd);
					builder.redirectErrorStream(false);
					Process p;

					try {
						p = builder.start();
						System.out.println("Error stream:");
						InputStream errorStream = p.getErrorStream();
						printStream(errorStream);
						p.waitFor();
						System.out.println("Output stream:");
						InputStream inputStream = p.getInputStream();
						printStream(inputStream);
					} catch (IOException | InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				}
			}
		}

	}

	private void printStream(InputStream stream) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(stream));
		String inputLine;
		while ((inputLine = in.readLine()) != null)
			System.out.println(inputLine);
		in.close();
	}
	
	public void beautify(String directoryName) {
		File directory = new File(directoryName);
		// System.out.println(directoryName);
		// get all the files from a directory
		File[] fList = directory.listFiles();
		for (File file : fList) {

			if (file.isDirectory()) {
				// System.out.println("directory");
				beautify(file.getAbsolutePath());
			}

			else if (file.isFile()) {
				String filename = file.getName();
				String extension = filename.substring(filename.lastIndexOf(".") + 1, filename.length());
				// System.out.println(extension);
				String cmd = "js-beautify \"" + file.getAbsolutePath() + "\" > \"" + file.getParent() + "\\ilvd_"
						+ filename + "\"";

				String ex = "js";
				if (extension.equals(ex)) {
					System.out.println(cmd);
					ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", cmd);

					builder.redirectErrorStream(true);
					Process p;
						
					try {
						p = builder.start();
						System.out.println("Error stream:");
					    InputStream errorStream = p.getErrorStream();
					    printStream(errorStream);
					    p.waitFor();
					    System.out.println("Output stream:");
					    InputStream inputStream = p.getInputStream();
					    printStream(inputStream);
					} catch (IOException | InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}


				}
			}
		}

	}

}
