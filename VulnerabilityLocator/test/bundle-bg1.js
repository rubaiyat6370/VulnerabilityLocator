function mainMethod(){
	//console.log(addition(4,5));
	var actual = "stringtoencrypt";
	var encrypted = Encryption(actual);
	var decrypted = Decrypt(encrypted);
	console.log(decrypted);
}
mainMethod();



function outer(s) 
{
	var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
       // Action to be performed when the document is read;
    }
};
xhttp.open("GET", "filename", true);
xhttp.send();
	var x = arguments[0];
	if (s.indexOf('o') > 0) {
		function inner(y)
		{	var t = ".suffix";
			var arr = [ x + t, y ];
			this.data = arr;
		}
		return new inner(s);
	}
}
var outerProp = outer("outer").data;

function g() {
	xhttp.open("POST", "filename", true);
	var a = 0;
	for(var i=0;i<10;i++)
	{
		a = i + a;
	}
	return a;
}

function f() { 
   var x = g();
   var y = x;
   return y;
   
} 
f();

function Encryption(actual)
{
    var str1 = "Hello ";
	var str2 = "world!";
	var res = str1.concat(str2);
	var n = encode(str1,str2);
    var key = 100; //Any integer value
    var result = n;
    for(i=0; i<actual.length;i++)
    {
        result += String.fromCharCode(key^actual.charCodeAt(i));
		var x = 9.656;
		var y = x.toExponential(2); 
    }
    alert(result);
}

function encode(pwd, usr) {
return encodeURI(pwd) + encodeURI(usr);
}


function Decrypt(actual)
{
   
    var key = 100; //Any integer value
    var result="";    
    for(i=0; i<actual.length; i++)
    {
        result += String.fromCharCode(key^actual.charCodeAt(i));
    }
}